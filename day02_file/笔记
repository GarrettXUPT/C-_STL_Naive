
C++输入与输出流：
	输入和输出是相对程序而言
	标准输入：键盘输入数据到程序
	标准输出：乘数数据输出到显示器
	标准输入 + 标准输出 = 标准IO
	文件输入输出：文件IO

cin和cout：
	cout是个全局流对象，自动与显示器关联
	cerr：标准错误，输出数据到显示器，没有缓冲区
	clog：标准日志，输出数据到显示器，有缓冲区
	endl：刷新缓冲区
	输入输出缓冲区：
		键盘数据先到输入缓冲区(一块内存)

STL基本概念：
	STL(Standard Tempalte Libary,标准模板库)，分位容器，算法，迭代器

STL优点：
	1、STL是C++的一部分，不需要额外安装什么东西
	2、STL的重要特点就是数据结构与算法是分离的，使STL变得更加的通用

容器：
	容器是可以且套容器的，分为序列式容器和关联式容器
	序列式容器：容器的元素是由进入容器的时间和地点决定的
	关联容器：容器已经有对着，进入容器元素的位置不是由进入容器的时间和地点决定

迭代器：
	用来遍历容器中元素的指针，迭代器就可以理解为指针，对指针的操作基本都可以对迭代器进行操作
	事实上，迭代器是一个类，该类封装了一个指针 

算法：
	通过有限的步骤，解决问题

String容器：
	1、char*是个指针，而string是一个类，string封装了char*
	2、String内部封装了很多成员方法
		查找find，拷贝copy，删除delete，替换replace，插入insert
	3、不需要考虑内存释放和越界

vector容器：
	动态数组，可变数组，是一个单口容器，
	携带迭代器v.begin() v.end(),方向迭代器v.rbegin()指向容器最后一个元素，v.rend()指向第一个
	该容器最好在尾部进行操作
	动态增长的基本原理：
		当插入新元素时，若空间不足，那么vector会申请更大的空间，将元素拷贝到新空间，然后释放旧空间的数据，再将新元素插入新申请的空间，默认时会直接申请现有空间的两倍

deque容器：
	特征总结：
		1、双端数组在插入和删除元素时，效率较高
		2、指定位置插入元素也会导致大量数据元素移动，会降低效率
		3、可随机存取，效率较高

stack容器：
	先进后出容器，特征总结：
		栈不能遍历，不支持随机存取，能能通过top从栈顶获取或者删除,不提供迭代器

queue容器：
	先进先出，一端插入，在另一端删除，不能进行遍历，不提供迭代器，不支持随机访问

链表容器：
	链表是由一系列结点，结点包含两个域，一个数据域，一个指针域。
	1、链表内存是非连续的，删除元素时间复杂度都是常数，不需要移动元素，比数组添加删除效率高
	2、链表旨在需要的时候，才会分配内存 
	3、链表中，只要拿到了一个节点，就拿到了整个列表
	4、链表需要额外控件保存节点关系，即前驱后继关系